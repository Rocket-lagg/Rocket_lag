Notes pour les diagrammes

Classes à créer :

    class Joueur {
        +id_joueur: int
        +pseudo: string
        +mdp: string
        +age: int
        +mail: string
    }
    
    class JoueurDao {
        +creer(Joueur): bool
        +trouver_par_id(int): Joueur
        +lister_tous(): list[Joueur]
        +supprimer(Joueur): bool
        +se_connecter(str,str): Joueur
    }
    
    class JoueurService {
        +creer(str...): Joueur
        +trouver_par_id(int): Joueur
        +lister_tous(): list[Joueur]
        +afficher_tous(): str
        +supprimer(Joueur): bool
        +se_connecter(str,str): Joueur
        +"consulter_stat()"
    }

    class AccueilVue {
    }
    
    class ConnexionVue {
    }

    class MenuJoueurVue {
    }

    class VueAbstraite{
      +afficher()
      +choisir_menu()
    }

    VueAbstraite <|-- AccueilVue
    VueAbstraite <|-- ConnexionVue
    VueAbstraite <|-- MenuJoueurVue
    MenuJoueurVue ..> JoueurService : appelle
    ConnexionVue ..> JoueurService : appelle
    JoueurService ..> JoueurDao : appelle
    Joueur <.. JoueurService: utilise
    Joueur <.. JoueurDao: utilise
Classe utilisateur (joueur DAO)
Classe match

Explications :
DAO -> communiquer directement avec la base de donnée : requêtes SQL dans un code python
Service : utilise la classe DAO pour importer les données et les transformer
Classe de base -> helper qui permet l’autocomplétion, classe qui instancie des objets
Exemple : db_connection = connecte la code python avec la base de données
Joueur_dao : utilise la connexion mise en place pour lancer des requêtes SQL dans la base de donnée
